<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/j2ee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="2.4"
	xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">
	<!-- Spring ApplicationContext配置文件的路径�,可使用通配符，多个路径用�1,号分隔
		此参数用于后面的Spring-Context loader -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			classpath*:spring/*.xml
			classpath:org/codehaus/xfire/spring/xfire.xml
		</param-value>
	</context-param> 
	<!-- 默认i18n资源文件 add by wangzijian-->
	<context-param>
		<param-name>
			javax.servlet.jsp.jstl.fmt.localizationContext
		</param-name>
		<param-value>i18n/messages</param-value>
	</context-param>
	<context-param>  
        <param-name>log4jConfigLocation</param-name>  
        <param-value>/WEB-INF/log4j.properties</param-value>  
    </context-param> 
	<!-- CAS中心认证服务器Filter 
<filter>
  <filter-name>CAS Filter</filter-name>
	<filter-class>edu.yale.its.tp.cas.client.filter.CASFilter</filter-class>
	<init-param>
		<param-name>edu.yale.its.tp.cas.client.filter.loginUrl</param-name>
		<param-value>https://21.8.129.6:9528/casserver/login</param-value>
	</init-param>
	<init-param>
		<param-name>edu.yale.its.tp.cas.client.filter.validateUrl</param-name>
		<param-value>https://21.8.129.6:9528/casserver/serviceValidate</param-value>
	</init-param>
	<init-param>
		<param-name>edu.yale.its.tp.cas.client.filter.serverName</param-name>
		<param-value>21.8.129.6:6600</param-value>
	</init-param>
	<init-param>
		<param-name>edu.yale.its.tp.cas.client.filter.wrapRequest</param-name>
		<param-value>true</param-value>
	</init-param>
</filter>
<filter-mapping>
	<filter-name>CAS Filter</filter-name>
	<url-pattern>*.do</url-pattern>
</filter-mapping>
<filter-mapping>
	<filter-name>CAS Filter</filter-name>
	<url-pattern>*.jsp</url-pattern>
</filter-mapping>-->
<!-- SAA的Session Filter用于初始化session-->
<!-- 
	<filter>  
        <filter-name>SESSION FILTER</filter-name>  
        <filter-class>cn.com.sinosoft.filter.SessionFilter</filter-class>  
    </filter>   
    <filter-mapping>  
        <filter-name>SESSION FILTER</filter-name>  
	<url-pattern>*.do</url-pattern>  
    </filter-mapping>
 --> 
	<!-- openSessionInView 要配置在struts2的FilterDispatcher之前-->
	<!--Hibernate Open Session in View Filter-->
	<filter>
		<filter-name>hibernateFilter</filter-name>
		<filter-class>
			org.springframework.orm.hibernate3.support.OpenSessionInViewFilter
		</filter-class>
	</filter>
	<!-- 著名 Character Encoding filter -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>
			org.springframework.web.filter.CharacterEncodingFilter
		</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	<filter>
		<filter-name>struts-cleanup</filter-name>
		<filter-class>
			org.apache.struts2.dispatcher.ActionContextCleanUp
		</filter-class>
	</filter>
	<filter>
		<filter-name>struts2</filter-name>
		<filter-class>
			org.apache.struts2.dispatcher.FilterDispatcher
		</filter-class>
	</filter>

	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>*.jsp</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>hibernateFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- 让hibernate open session in view的荣光也照耀xfire -->
	<filter-mapping>
		<filter-name>hibernateFilter</filter-name>
		<url-pattern>/service/*</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>struts-cleanup</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>struts2</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!--Spring ApplicationContext 载入 -->
	<listener>  
        <listener-class>  
            org.springframework.web.util.Log4jConfigListener  
        </listener-class>  
    </listener>
	<listener>
		<listener-class>
			org.springframework.web.context.ContextLoaderListener
		</listener-class>
	</listener>

	<!-- Spring 刷新Introspector防止内存泄露 -->
	<listener>
		<listener-class>
			org.springframework.web.util.IntrospectorCleanupListener
		</listener-class>
	</listener>
	<!-- DWR servlet,生产环境应该Debug为false 
		<servlet-mapping>
		<servlet-name>dwr-invoker</servlet-name>
		<url-pattern>/dwr/*</url-pattern>
	</servlet-mapping>
	<servlet>
		<servlet-name>dwr-invoker</servlet-name>
		<servlet-class>uk.ltd.getahead.dwr.DWRServlet</servlet-class>
		<init-param>
			<param-name>debug</param-name>
			<param-value>true</param-value>
		</init-param>
		<init-param>
		   <param-name>crossDomainSessionSecurity</param-name>
		   <param-value>false</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	-->
	<servlet>
		<servlet-name>xfire</servlet-name>
		<servlet-class>
			<!--  org.codehaus.xfire.spring.XFireSpringServlet -->
			org.springframework.web.servlet.DispatcherServlet
		</servlet-class>
	</servlet>
  <servlet>
    <servlet-name>InitServlet</servlet-name>
    <servlet-class>cn.com.sinosoft.cas.InitServlet</servlet-class>
    <load-on-startup>2</load-on-startup>
  </servlet>
  <servlet>
		<servlet-name>initArch2ConfigServlet</servlet-name>
		<servlet-class>
			cn.com.sinosoft.common.web.ExtendedStrutsActionServlet
		</servlet-class>
		<load-on-startup>3</load-on-startup>
	</servlet>
	<servlet>
    <servlet-name>Logout</servlet-name>
    <servlet-class>cn.com.sinosoft.servlet.Logout</servlet-class>
  </servlet>
  <servlet>
  <servlet-name>HYInterface</servlet-name>
  <servlet-class>cn.com.hy369.servlet.InterfaceServlet</servlet-class>
  </servlet>

	<servlet-mapping>
		<servlet-name>xfire</servlet-name>
		<url-pattern>/service/*</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
    <servlet-name>Logout</servlet-name>
    <url-pattern>/logout</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
  	<servlet-name>HYInterface</servlet-name>
  	<url-pattern>/HYInterface</url-pattern>
  </servlet-mapping>
	<!--  
  <servlet-mapping>
    <servlet-name>InitServlet</servlet-name>
    <url-pattern>/servlet/InitServlet</url-pattern>
  </servlet-mapping>-->

	<!-- session超时定义,单位为分钟 -->
	<session-config>
		<session-timeout>-10</session-timeout>
	</session-config>
	<!-- 默认首页定义 -->
	<welcome-file-list>
		<welcome-file>login.jsp</welcome-file>
		<welcome-file>index.jsp</welcome-file>
		<welcome-file>index.html</welcome-file>
	</welcome-file-list>
	<!-- Error Page定义 -->
	<error-page>
		<error-code>500</error-code>
		<location>/common/error.jsp</location>
	</error-page>
	<error-page>
		<error-code>404</error-code>
		<location>/common/404.jsp</location>
	</error-page>
	<error-page>
		<error-code>403</error-code>
		<location>/common/403.jsp</location>
	</error-page>
	<error-page>
		<exception-type>
			ins.framework.exception.DataVerifyException
		</exception-type>
		<location>/common/error.jsp</location>
	</error-page>
	<mime-mapping>
		<extension>doc</extension>
		<mime-type>application/msword</mime-type>
	</mime-mapping>
	<mime-mapping> 
		<extension>xls</extension> 
		<mime-type>application/msexcel</mime-type> 
	</mime-mapping>
	<mime-mapping> 
		<extension>unl</extension> 
		<mime-type>application/unl</mime-type> 
	</mime-mapping>
</web-app>

